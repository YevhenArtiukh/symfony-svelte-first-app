#security:
#    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#    providers:
#        users_in_memory: { memory: null }
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            anonymous: true
#            lazy: true
#            provider: users_in_memory
#
#            # activate different ways to authenticate
#            # https://symfony.com/doc/current/security.html#firewalls-authentication
#
#            # https://symfony.com/doc/current/security/impersonating_user.html
#            # switch_user: true
#
#    # Easy way to control access for large sections of your site
#    # Note: Only the *first* access control that matches will be used
#    access_control:
#        # - { path: ^/admin, roles: ROLE_ADMIN }
#        # - { path: ^/profile, roles: ROLE_USER }

security:
    encoders:
        App\Entity\Users\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Users\User
                property: email
        app_user_refresh_provider:
            entity:
                class: App\Entity\Users\User
                property: username
    firewalls:
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            provider: app_user_provider
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        refresh:
            pattern: ^/api/token/refresh
            stateless: true
            anonymous: true
            provider: app_user_refresh_provider

        api:
            pattern:   ^/api
            stateless: true
            provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/user/add, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api/users/add, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: ROLE_ADMIN }